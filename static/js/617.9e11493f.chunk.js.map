{"version":3,"file":"static/js/617.9e11493f.chunk.js","mappings":"uKAeA,UAZc,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACf,OACE,0BACE,wBAAKA,KAGV,C,mKCPoBC,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,KACnBC,QAAU,CACRC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,8NALI,CASV,OATU,kEASV,WAAcC,GAAd,kGAE2BC,EAAAA,EAAAA,IAAA,6CACiBD,EADjB,2BAErBE,KAAKP,SAJX,cAEUQ,EAFV,OAMUC,EAAUD,EAASE,KAN7B,kBAOW,CAAED,QAAAA,IAPb,sCASU,IAAIE,MAAJ,gBATV,4GATU,MASV,EAVmBZ,G,uCCDRa,EAAgBC,EAAAA,EAAAA,IAAH,+GAObC,EAAYD,EAAAA,EAAAA,GAAH,4TAgBTE,EAAaF,EAAAA,EAAAA,IAAH,wGAOVG,EAAYH,EAAAA,EAAAA,EAAH,0GAOTI,EAAgBJ,EAAAA,EAAAA,EAAH,mFAMbK,EAAmBL,EAAAA,EAAAA,IAAH,wG,SCgB7B,EA9Ca,WACX,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAaC,EAAAA,EAAAA,UAAQ,kBAAM,IAAIvB,CAAV,GAAyB,IACpD,GAAgCwB,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,MAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAEMC,GAAYC,EAAAA,EAAAA,cAAW,iBAAC,6GAEHR,EAAWS,QAAQX,GAFhB,OAEpBX,EAFoB,OAG1BiB,EAAYjB,EAASC,QAAQsB,MAHH,gDAK1BJ,EAAW,EAAD,IALgB,yDAO3B,CAACN,EAAYF,EAASM,IAOzB,OALAO,EAAAA,EAAAA,YAAU,YACHR,EAASS,OAAS,GACrBL,GAEH,GAAE,CAACA,EAAWJ,KAEb,SAACZ,EAAD,UACIc,GAmBA,SAAC,UAAD,UAAO,0CAlBPF,EAASU,KAAI,SAAAC,GAAK,OAChB,UAACrB,EAAD,WACGqB,EAAMC,cACL,SAACrB,EAAD,CACEsB,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAKH,EAAMI,QAGb,SAACrB,EAAD,CACEmB,IAAI,+EACJC,IAAKH,EAAMI,QAGf,SAACvB,EAAD,UAAYmB,EAAMI,QAClB,UAACtB,EAAD,WAAe,cAAYkB,EAAMK,UAAU,SAb7BL,EAAM9B,GADN,KAsBzB,C","sources":["components/Error/Error.jsx","services/getCastInfo.js","pages/Cast/Cast.Styled.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = ({ children }) => {\n  return (\n    <div>\n      <h3>{children}</h3>\n    </div>\n  );\n};\n\nError.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Error;\n","import axios from 'axios';\n\nexport default class getCastInfo {\n  options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyMWQ2MWE4YjQ2NmU1YmQxMTMyMTgyMzhjNGY0ZjlmMyIsInN1YiI6IjY0YTI2YTQzODI4OWEwMDBjYWYwYTVlZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.nhvEKG7EoG9x1nhRPq5CaXnidc__HxCqBk3ol-ubvBY',\n    },\n  };\n\n  async getCast(id) {\n    try {\n      const response = await axios.get(\n        `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`,\n        this.options\n      );\n      const results = response.data;\n      return { results };\n    } catch (error) {\n      throw new Error(`No cast info`);\n    }\n  }\n}\n","import styled from '@emotion/styled';\nexport const CastContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nexport const ActorCard = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 10px;\n  padding: 10px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  background-color: #ffffff;\n  transition: transform 0.3s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n  }\n`;\n\nexport const ActorImage = styled.img`\n  width: 200px;\n  height: 300px;\n  object-fit: cover;\n  border-radius: 8px;\n`;\n\nexport const ActorName = styled.p`\n  margin-top: 10px;\n  font-size: 16px;\n  font-weight: bold;\n  color: #333333;\n`;\n\nexport const CharacterName = styled.p`\n  margin-top: 5px;\n  font-size: 14px;\n  color: #666666;\n`;\n\nexport const PlaceholderImage = styled.img`\n  width: 200px;\n  height: 300px;\n  object-fit: cover;\n  border-radius: 8px;\n`;\n","import React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport getCastInfo from 'services/getCastInfo';\nimport { useParams } from 'react-router-dom';\nimport Error from 'components/Error/Error';\n\nimport {\n  CastContainer,\n  ActorCard,\n  PlaceholderImage,\n  ActorName,\n  CharacterName,\n  ActorImage,\n} from './Cast.Styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const apiService = useMemo(() => new getCastInfo(), []);\n  const [castInfo, setCastInfo] = useState([]);\n  const [isError, setIsError] = useState(null);\n\n  const fetchCast = useCallback(async () => {\n    try {\n      const response = await apiService.getCast(movieId);\n      setCastInfo(response.results.cast);\n    } catch (error) {\n      setIsError(error);\n    }\n  }, [apiService, movieId, setCastInfo]);\n\n  useEffect(() => {\n    if (!castInfo.length > 0) {\n      fetchCast();\n    }\n  }, [fetchCast, castInfo]);\n  return (\n    <CastContainer>\n      {!isError ? (\n        castInfo.map(actor => (\n          <ActorCard key={actor.id}>\n            {actor.profile_path ? (\n              <ActorImage\n                src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                alt={actor.name}\n              />\n            ) : (\n              <PlaceholderImage\n                src=\"https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png\"\n                alt={actor.name}\n              />\n            )}\n            <ActorName>{actor.name}</ActorName>\n            <CharacterName>Character: {actor.character} </CharacterName>\n          </ActorCard>\n        ))\n      ) : (\n        <Error>We don't have cast info of this movie</Error>\n      )}\n    </CastContainer>\n  );\n};\nexport default Cast;\n"],"names":["children","getCastInfo","options","method","headers","accept","Authorization","id","axios","this","response","results","data","Error","CastContainer","styled","ActorCard","ActorImage","ActorName","CharacterName","PlaceholderImage","movieId","useParams","apiService","useMemo","useState","castInfo","setCastInfo","isError","setIsError","fetchCast","useCallback","getCast","cast","useEffect","length","map","actor","profile_path","src","alt","name","character"],"sourceRoot":""}