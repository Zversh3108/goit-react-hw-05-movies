{"version":3,"file":"static/js/42.3521589d.chunk.js","mappings":"sKAeA,UAZc,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACf,OACE,0BACE,wBAAKA,KAGV,C,uKCPoBC,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,KACnBC,QAAU,CACRC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,8NALI,CASV,OATU,oEASV,WAAgBC,GAAhB,kGAE2BC,EAAAA,EAAAA,IAAA,0DAC8BD,EAD9B,8CAErBE,KAAKP,SAJX,UAEUQ,EAFV,OAS2B,KAFjBC,EAAUD,EAASE,KAAKD,SAElBE,OAThB,sBAUY,IAAIC,MAVhB,gCAaW,CAAEH,QAAAA,IAbb,wCAeU,IAAIG,MAAJ,oBAfV,6GATU,MASV,EAVmBb,G,iDCDRc,EAAkBC,EAAAA,EAAAA,IAAH,0FAKfC,EAAYD,EAAAA,EAAAA,IAAH,4QAaTE,EAAcF,EAAAA,EAAAA,IAAH,8HAOXG,EAAaH,EAAAA,EAAAA,EAAH,4GAMVI,EAAmBJ,EAAAA,EAAAA,IAAH,wGAMhBK,EAAOL,EAAAA,EAAAA,KAAH,0FAMJM,EAAQN,EAAAA,EAAAA,MAAH,wIAQLO,EAASP,EAAAA,EAAAA,OAAH,0S,SCoDnB,EAvFe,WAAO,IAAD,EACbQ,GAAaC,EAAAA,EAAAA,UAAQ,kBAAM,IAAIxB,CAAV,GAA0B,IAC/CyB,GAAWC,EAAAA,EAAAA,MAEjB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAEA,GAA8BF,EAAAA,EAAAA,UAAS,MAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAC/C,GAAsCT,EAAAA,EAAAA,UAASQ,GAA/C,eAAOE,EAAP,KAAoBC,EAApB,KAMMC,GAAcC,EAAAA,EAAAA,cAAW,iBAAC,2FAC9BT,GAAW,GADmB,kBAGLR,EAAWkB,UAAUJ,GAHhB,OAGtB5B,EAHsB,OAI5BoB,EAAUpB,EAASC,SAJS,gDAM5BqB,EAAW,EAAD,IANkB,qGAS7B,CAACR,EAAYc,EAAaR,KAE7Ba,EAAAA,EAAAA,YAAU,WAIT,KACDA,EAAAA,EAAAA,YAAU,WACHP,GAGLI,GAED,GAAE,CAACJ,IAQJ,OACE,4BACE,UAACf,EAAD,CAAMuB,SATW,SAAAC,GA3BK,IAAAC,EA4BxBD,EAAME,iBA1BNZ,EAD6B,MADLW,EA6BNR,GA5BgB,CAAEQ,MAAAA,GAAU,CAAC,EA6BhD,EAMG,WACE,SAACxB,EAAD,CACE0B,KAAK,OACLC,MAAOX,EACPY,SATkB,SAAAL,GACxBN,EAAeM,EAAMM,OAAOF,MAC7B,EAQOG,YAAY,mBAGd,SAAC7B,EAAD,CAAQyB,KAAK,SAAb,SAAsB,cAGtBjB,GAuBA,SAAC,UAAD,UAAO,6CAtBP,SAAChB,EAAD,UACGc,EAAOwB,KAAI,SAAAC,GAAI,OACd,SAACrC,EAAD,WACE,UAAC,KAAD,CAAMsC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMhC,GAA/C,UACG4B,EAAKK,aACJ,SAACzC,EAAD,CACE0C,IAAG,yCAAoCN,EAAKK,aAC5CE,IAAKP,EAAKQ,MAAQR,EAAKQ,MAAQR,EAAKS,QAGtC,SAAC3C,EAAD,CACEwC,IAAI,+EACJC,IAAKP,EAAKS,QAId,SAAC5C,EAAD,UAAamC,EAAKQ,MAAQR,EAAKQ,MAAQR,EAAKS,WAdhCT,EAAKE,GADP,QAyBzB,C","sources":["components/Error/Error.jsx","services/getMoviesByName.js","pages/Movies/Movies.Styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = ({ children }) => {\n  return (\n    <div>\n      <h3>{children}</h3>\n    </div>\n  );\n};\n\nError.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Error;\n","import axios from 'axios';\n\nexport default class SearchMovies {\n  options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyMWQ2MWE4YjQ2NmU1YmQxMTMyMTgyMzhjNGY0ZjlmMyIsInN1YiI6IjY0YTI2YTQzODI4OWEwMDBjYWYwYTVlZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.nhvEKG7EoG9x1nhRPq5CaXnidc__HxCqBk3ol-ubvBY',\n    },\n  };\n\n  async getMovies(searchWord) {\n    try {\n      const response = await axios.get(\n        `https://api.themoviedb.org/3/search/movie?query=${searchWord}&include_adult=false&language=en-US&page=1`,\n        this.options\n      );\n\n      const results = response.data.results;\n\n      if (results.length === 0) {\n        throw new Error();\n      }\n\n      return { results };\n    } catch (error) {\n      throw new Error(`No popular films`);\n    }\n  }\n}\n","import styled from '@emotion/styled';\nexport const MoviesContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\nexport const MovieCard = styled.div`\n  width: 200px;\n  margin: 10px;\n  padding: 10px;\n  border-radius: 8px;\n  background-color: #ffffff;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s ease-in-out;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\nexport const MoviePoster = styled.img`\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n  border-radius: 8px;\n  margin-bottom: 10px;\n`;\nexport const MovieTitle = styled.p`\n  font-size: 16px;\n  font-weight: bold;\n  margin-bottom: 5px;\n  color: #333333;\n`;\nexport const PlaceholderImage = styled.img`\n  width: 200px;\n  height: 300px;\n  object-fit: cover;\n  border-radius: 8px;\n`;\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  margin-bottom: 16px;\n`;\n\nexport const Input = styled.input`\n  padding: 8px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  margin-right: 8px;\n  border-color: grey;\n`;\n\nexport const Button = styled.button`\n  background-color: #ccc;\n  color: #fff;\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: #999;\n  }\n\n  &:focus,\n  &:active {\n    background-color: #888;\n  }\n`;\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\n\nimport SearchMovies from 'services/getMoviesByName';\nimport Error from 'components/Error/Error';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\n\nimport {\n  MoviesContainer,\n  MovieCard,\n  Form,\n  Input,\n  Button,\n  MoviePoster,\n  PlaceholderImage,\n  MovieTitle,\n} from './Movies.Styled';\n\nconst Movies = () => {\n  const apiService = useMemo(() => new SearchMovies(), []);\n  const location = useLocation();\n\n  const [movies, setMovies] = useState([]);\n\n  const [isError, setIsError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') ?? '';\n  const [searchInput, setSearchInput] = useState(movieName);\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n  const fetchMovies = useCallback(async () => {\n    setIsError(false);\n    try {\n      const response = await apiService.getMovies(searchInput);\n      setMovies(response.results);\n    } catch (error) {\n      setIsError(error);\n    } finally {\n    }\n  }, [apiService, searchInput, setMovies]);\n\n  useEffect(() => {\n    if (!searchInput) {\n      return;\n    }\n  });\n  useEffect(() => {\n    if (!movieName) {\n      return;\n    }\n    fetchMovies();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [movieName]);\n  const handleSearch = event => {\n    event.preventDefault();\n    updateQueryString(searchInput);\n  };\n  const handleInputChange = event => {\n    setSearchInput(event.target.value);\n  };\n  return (\n    <div>\n      <Form onSubmit={handleSearch}>\n        <Input\n          type=\"text\"\n          value={searchInput}\n          onChange={handleInputChange}\n          placeholder=\"Search movies\"\n        />\n\n        <Button type=\"submit\">Search</Button>\n      </Form>\n\n      {!isError ? (\n        <MoviesContainer>\n          {movies.map(film => (\n            <MovieCard key={film.id}>\n              <Link to={`/movies/${film.id}`} state={{ from: location }}>\n                {film.poster_path ? (\n                  <MoviePoster\n                    src={`https://image.tmdb.org/t/p/w500${film.poster_path}`}\n                    alt={film.title ? film.title : film.name}\n                  />\n                ) : (\n                  <PlaceholderImage\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png\"\n                    alt={film.name}\n                  />\n                )}\n\n                <MovieTitle>{film.title ? film.title : film.name}</MovieTitle>\n              </Link>\n            </MovieCard>\n          ))}\n        </MoviesContainer>\n      ) : (\n        <Error>We don't have any movies with this name</Error>\n      )}\n    </div>\n  );\n};\nexport default Movies;\n"],"names":["children","SearchMovies","options","method","headers","accept","Authorization","searchWord","axios","this","response","results","data","length","Error","MoviesContainer","styled","MovieCard","MoviePoster","MovieTitle","PlaceholderImage","Form","Input","Button","apiService","useMemo","location","useLocation","useState","movies","setMovies","isError","setIsError","useSearchParams","searchParams","setSearchParams","movieName","get","searchInput","setSearchInput","fetchMovies","useCallback","getMovies","useEffect","onSubmit","event","query","preventDefault","type","value","onChange","target","placeholder","map","film","to","id","state","from","poster_path","src","alt","title","name"],"sourceRoot":""}